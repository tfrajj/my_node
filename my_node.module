<?php

/**
 * @file
 * Middle test case module.
 *
 * @author Yurii Lytvynchuk
 */

const MY_NODE_CT_NAME = 'my_node';

/**
 * Implements hook_node_info().
 */
function my_node_node_info() {
  return [
    MY_NODE_CT_NAME => [
      'name' => t('My Node'),
      'base' => MY_NODE_CT_NAME,
      'description' => t('This is custom node type My Node.'),
    ],
  ];
}

/**
 * Implements hook_form().
 */
function my_node_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_type_insert().
 */
function my_node_node_type_insert($content_type) {
  if ($content_type->type == MY_NODE_CT_NAME) {
    // Add the body field.
    $body_instance = node_add_body_field($content_type);

    // Save changes to the body field instance.
    field_update_instance($body_instance);

    // Create all the fields we are adding to our content type.
    foreach (_my_node_installed_fields() as $field) {
      field_create_field($field);
    }

    // Create all the instances for our fields.
    foreach (_my_node_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = MY_NODE_CT_NAME;
      field_create_instance($instance);
    }
  }
}

/**
 * Define the fields for the my_node content type.
 *
 * @return array
 *   An associative array specifying the fields.
 */
function _my_node_installed_fields() {
  $fields = [];

  if (module_exists('link')) {
    $fields[MY_NODE_CT_NAME . '_link'] = [
      'type' => 'link_field',
      'field_name' => MY_NODE_CT_NAME . '_link',
    ];
  }

  return $fields;
}

/**
 * Define the field instances for the my_node content type.
 *
 * @return array
 *   An associative array specifying fields instances.
 */
function _my_node_installed_instances() {
  $instances = [];

  if (module_exists('link')) {
    $instances[MY_NODE_CT_NAME . '_link'] = [
      'field_name' => MY_NODE_CT_NAME . '_link',
      'label' => t('Link'),
      'widget' => [
        'type' => 'link_field',
      ],
    ];
  }

  return $instances;
}

/**
 * Implements hook_theme().
 */
function my_node_theme($existing, $type, $theme, $path) {
  $theme = [];

  $templates_path = drupal_get_path('module', 'my_node') . '/templates';

  $theme['node__my_node'] = [
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--my-node',
    'path' => $templates_path,
  ];
  $theme['node__my_node__teaser__odd'] = [
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--my-node--teaser--odd',
    'path' => $templates_path,
  ];
  $theme['node__my_node__teaser__even'] = [
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--my-node--teaser--even',
    'path' => $templates_path,
  ];

  return $theme;
}

/**
 * Implements hook_preprocess_node().
 */
function my_node_preprocess_node(&$vars) {
  if (isset($vars['node']->type) && $vars['node']->type == MY_NODE_CT_NAME && $vars['view_mode'] == 'teaser') {
    $suffix = &drupal_static(__FUNCTION__);
    $suffix = $suffix != 'odd' ? 'odd' : 'even';

    $vars['theme_hook_suggestions'][] = 'node__' . MY_NODE_CT_NAME .  '__' . $vars['view_mode'] . '__' . $suffix;

    drupal_add_css(drupal_get_path('module', 'my_node') . '/css/my_node.css');
  }
}


/**
 * Implements hook_block_info().
 */
function my_node_block_info() {
  return [
    MY_NODE_CT_NAME . '_last_three' => [
      'info' => t('Last three items of My Nodes content'),
      'region' => 'sidebar_first',
      'status' => TRUE,
    ]
  ];
}

/**
 * Implements hook_block_view().
 */
function my_node_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case MY_NODE_CT_NAME . '_last_three':
      $block['subject'] = t('Last My Nodes');

      if ($items = my_node_last_items_content()) {
        $block['content'] = [
          '#theme' => 'item_list',
          '#items' => $items,
        ];
      }
      else {
        $block['content'] = t('No data yet.');
      }

      break;
  }

  return $block;
}

/**
 * Get latest nodes list of My Node content type
 *
 * @param int $count
 *   List items count.
 *
 * @return array
 *   List items as links to nodes.
 */
function my_node_last_items_content($count = 3) {
  $result = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('n.type', MY_NODE_CT_NAME)
    ->orderBy('n.created', 'DESC')
    ->range(0, $count)
    ->execute()
    ->fetchAllKeyed();

  $items = [];
  foreach ($result as $nid => $title) {
    $items[] = l($title, 'node/' . $nid);
  }

  return $items;
}

/*
 * Implementation of hook_views_api()
 */
function my_node_views_api() {
  return ['api' => 3.0];
}

function my_node_block_info_alter(&$blocks, $theme, $code_blocks) {
  if (isset($blocks['views']['last_my_nodes_via_views-block'])) {
    $blocks['views']['last_my_nodes_via_views-block']['region'] = 'sidebar_first';
    $blocks['views']['last_my_nodes_via_views-block']['status'] = TRUE;
  }
}
